{"version":3,"sources":["components/Table.jsx","components/TableInput.jsx","components/RemoveLastRowButton.jsx","store.js","App.js","serviceWorker.js","index.js"],"names":["Table","observer","_this$props$store","this","props","store","todos","todosCount","react_default","a","createElement","Fragment","map","todo","Table_TableRow","key","id","Component","TableRow","_ref","userId","title","completed","TableInput","handleInput","e","value","target","_this","handleSubmit","preventDefault","addTodo","htmlFor","type","name","onChange","placeholder","onClick","observable","removeTodo","Store","Object","classCallCheck","initializerDefineProperty","store_descriptor","_descriptor2","_descriptor3","loadData","axios","get","data","splice","length","computed","action","push","_this2","pop","todosStore","App","components_TableInput","src_components_Table","components_RemoveLastRowButton","mobx_react_devtools_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b1e13e5.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport './Table.css'\r\n\r\n@observer\r\nclass Table extends Component {\r\n  render() {\r\n    const { todos, todosCount } = this.props.store\r\n    return (\r\n      <>\r\n        <div>We have {todosCount} records</div>\r\n        <div>\r\n          <table>\r\n            <thead>\r\n              <tr>\r\n                <td>Todo Id</td>\r\n                <td>User Id</td>\r\n                <td>Title</td>\r\n                <td>Status</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {todos.map(todo => (\r\n                <TableRow key={todo.id} todo={todo} />\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst TableRow = ({ todo }) => {\r\n  return (\r\n    <tr>\r\n      <td>{todo.id}</td>\r\n      <td>{todo.userId}</td>\r\n      <td>{todo.title}</td>\r\n      <td>{todo.completed ? 'true' : 'false'}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default Table\r\n","import React, { Component } from 'react'\r\nimport { observable } from 'mobx'\r\nimport { observer } from 'mobx-react'\r\n\r\n@observer\r\nclass TableInput extends Component {\r\n  @observable title = ''\r\n\r\n  handleInput = e => {\r\n    const { value } = e.target\r\n    this.title = value\r\n  }\r\n  handleSubmit = e => {\r\n    e.preventDefault()\r\n    const { todosCount, addTodo } = this.props.store\r\n    addTodo({\r\n      id: todosCount + 1,\r\n      userId: 2,\r\n      title: this.title,\r\n      completed: false\r\n    })\r\n  }\r\n  render() {\r\n    return (\r\n      <form>\r\n        <div>\r\n          <label htmlFor=\"\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"title\"\r\n            onChange={this.handleInput}\r\n            placeholder=\"Enter title\"\r\n          />\r\n        </div>\r\n        <button type=\"submit\" onClick={this.handleSubmit}>\r\n          Submit\r\n        </button>\r\n      </form>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TableInput\r\n","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\n\r\n// Leading decorators must be attached to a class declaration\r\nconst RemoveLastRowButton = ({ store }) => {\r\n  const { removeTodo } = store\r\n  return (\r\n    <div>\r\n      <button onClick={removeTodo}>Remove</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default observer(RemoveLastRowButton)\r\n","import { observable, action, computed } from 'mobx'\r\nimport axios from 'axios'\r\n\r\nclass Store {\r\n  constructor() {\r\n    // load initial value\r\n    this.loadData()\r\n  }\r\n  @observable todos = []\r\n  @computed get todosCount() {\r\n    return this.todos.length\r\n  }\r\n  @action async loadData() {\r\n    const todos = await axios.get(`https://jsonplaceholder.typicode.com/todos/`)\r\n    this.todos = todos.data.splice(0, 30)\r\n  }\r\n  @action addTodo = todo => {\r\n    this.todos.push(todo)\r\n  }\r\n  @action removeTodo = () => {\r\n    this.todos.pop()\r\n  }\r\n}\r\n\r\nexport default Store\r\n","import React, { Component } from 'react'\nimport DevTools from 'mobx-react-devtools'\nimport Table from './components/Table'\nimport TableInput from './components/TableInput'\nimport RemoveLastRowButton from './components/RemoveLastRowButton'\nimport Store from './store'\nimport './App.css'\n\nconst todosStore = new Store()\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <TableInput store={todosStore} />\n        <Table store={todosStore} />\n        <RemoveLastRowButton store={todosStore} />\n        <DevTools />\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}